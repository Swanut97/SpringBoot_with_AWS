buildscript { // 프로젝트의 의존성 관리. 그래들의 맨위
    ext { // 그래들의 전역변수
        springBootVersion = '2.1.7.RELEASE'
    }
    repositories {
        mavenCentral() // 의존성 원격 저장소
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management' // 의존성 관리 플러그인


group 'org.example'
version  '1.0-SNAPSHOT'
sourceCompatibility = 1.8


repositories {
    mavenCentral()
}

dependencies {
    // chap 1
    implementation('org.springframework.boot:spring-boot-starter-web')
    testImplementation('org.springframework.boot:spring-boot-starter-test')
    // chap 2
    implementation('org.projectlombok:lombok') // 롬복: 게터 세터 디폴트컨스트럭터, toString 등을 어노테이션으로 자동 생성.
    annotationProcessor('org.projectlombok:lombok') // ?
    // chap 3
    implementation('org.springframework.boot:spring-boot-starter-data-jpa') // 스프링부트ㅡ용 spring data jpa 추상화 라이브러리
                                                                           // 스프링부트 버전에 맞춰 자동으로 jpa관련 라이브러리 버전 관리
    implementation('com.h2database:h2') // 인메모리 관계형 데이터 베이스,
                                        // 메모리 실해 -> 재시작시 초기화 -> 테스트용도 애용
    // chap 4
    implementation('org.springframework.boot:spring-boot-starter-mustache') // 머스테치 추가, 스프링 부트에서 공식 지원하는 템플릿 엔진

    // chap 5
    implementation('org.springframework.boot:spring-boot-starter-oauth2-client') // 클라이언트 입장에서 소셜 기능 구현 시 필요 의존성
    implementation('org.springframework.session:spring-session-jdbc')
    testImplementation('org.springframework.security:spring-security-test')

    // chap 8
    implementation('org.mariadb.jdbc:mariadb-java-client')
}